CREATE DATABASE Gateway ; 
GRANT INSERT ON grafanadb.* TO 'grafana'@'%';
GRANT TRIGGER ON grafanadb.* TO 'grafana'@'%';

USE grafanadb ;



CREATE TABLE sensors (
sensorid INT Primary Key NOT NULL , 
cp VARCHAR(10) , 
name VARCHAR (50)
) ; 

CREATE TABLE temperature_sensor (
sensorid INT NOT NULL ,
temperature FLOAT NOT NULL , 
humidty FLOAT NOT NULL , 
date_time datetime , 
FOREIGN KEY (sensorid) REFERENCES sensors(sensorid)
);

CREATE TABLE door_sensor (
sensorid INT NOT NULL ,
door_status VARCHAR(20) NOT NULL , 
date_time datetime ,
FOREIGN KEY (sensorid) REFERENCES sensors(sensorid)
);

CREATE TABLE smoke_sensor (
sensorid INT NOT NULL ,
fire_status VARCHAR(20) NOT NULL , 
date_time datetime ,
FOREIGN KEY (sensorid) REFERENCES sensors(sensorid)
);

CREATE TABLE actuators (
actuatorid INT Primary Key NOT NULL , 
cp VARCHAR(10) , 
name VARCHAR (50)
) ; 

CREATE TABLE relay_switch (
actuatorid INT NOT NULL ,
status VARCHAR(20) , 
date_time datetime ,
FOREIGN KEY (actuatorid) REFERENCES actuators(actuatorid)
);

CREATE TABLE siren (
actuatorid INT NOT NULL ,
status VARCHAR(20) , 
date_time datetime ,
FOREIGN KEY (actuatorid) REFERENCES actuators(actuatorid)
);





CREATE TABLE motion_sensor (
sensorid INT NOT NULL ,
motion_status VARCHAR(20) NOT NULL ,
date_time datetime ,
FOREIGN KEY (sensorid) REFERENCES sensors(sensorid)
);

CREATE TABLE glass_sensor (
sensorid INT NOT NULL ,
glass_status VARCHAR(20) NOT NULL ,
date_time datetime ,
FOREIGN KEY (sensorid) REFERENCES sensors(sensorid)
);

CREATE TABLE polution_sensor (
sensorid INT NOT NULL ,
polution FLOAT NOT NULL ,
date_time datetime ,
FOREIGN KEY (sensorid) REFERENCES sensors(sensorid)
);

CREATE TABLE power (
power FLOAT NOT NULL ,
date_time datetime
);

-- New table: users
CREATE TABLE users (
  id INT PRIMARY KEY NOT NULL,
  name VARCHAR(50) NOT NULL,
  password VARCHAR(50) NOT NULL
);

-- New table: dashboards
CREATE TABLE dashboards (
  id INT PRIMARY KEY NOT NULL,
  name VARCHAR(50) NOT NULL,
  user_id INT NOT NULL,
  FOREIGN KEY (user_id) REFERENCES users (id)
);

-- New table: dashboard_sensors
CREATE TABLE dashboard_sensors (
  dashboard_id INT NOT NULL,
  sensor_id INT NOT NULL,
  FOREIGN KEY (dashboard_id) REFERENCES dashboards (id),
  FOREIGN KEY (sensor_id) REFERENCES sensors (sensorid)
);

-- New table: dashboard_actuators
CREATE TABLE dashboard_actuators (
  dashboard_id INT NOT NULL,
  actuator_id INT NOT NULL,
  FOREIGN KEY (dashboard_id) REFERENCES dashboards (id),
  FOREIGN KEY (actuator_id) REFERENCES actuators (actuatorid)
);

-- Add unique constraint to dashboard_actuators table
ALTER TABLE dashboard_actuators
ADD CONSTRAINT unique_dashboard_actuator
UNIQUE (dashboard_id, actuator_id);

-- Add unique constraint to dashboard_sensors table
ALTER TABLE dashboard_sensors
ADD CONSTRAINT unique_dashboard_sensor
UNIQUE (dashboard_id, sensor_id);

CREATE TABLE dashboard_items (
  dashboard_id INT NOT NULL,
  item_id INT NOT NULL,
  partition_id VARCHAR(50) NOT NULL,
  item_type VARCHAR(50) NOT NULL,
  PRIMARY KEY (dashboard_id, item_id),
  FOREIGN KEY (dashboard_id) REFERENCES dashboards (id)
);

ALTER TABLE dashboard_items
ADD COLUMN user_id INT,
ADD CONSTRAINT fk_user_id
FOREIGN KEY (user_id) REFERENCES users (id);

-- Create a trigger on sensors table
DELIMITER //

CREATE TRIGGER check_sensor_actuator_id
BEFORE INSERT ON sensors
FOR EACH ROW
BEGIN
  IF EXISTS (
    SELECT *
    FROM actuators
    WHERE actuatorid = NEW.sensorid
  ) THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'sensorid and actuatorid cannot have the same value.';
  END IF;
END//

DELIMITER ;

-- Create a trigger on actuators table
DELIMITER //

CREATE TRIGGER check_actuator_sensor_id
BEFORE INSERT ON actuators
FOR EACH ROW
BEGIN
  IF EXISTS (
    SELECT *
    FROM sensors
    WHERE sensorid = NEW.actuatorid
  ) THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'sensorid and actuatorid cannot have the same value.';
  END IF;
END//

DELIMITER ;


